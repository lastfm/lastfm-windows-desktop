Pre-Requisits
=============

This project must be built using Visual Studio 2015, Update 3 or above.
You must have .NET 4.6.2 installed (https://www.microsoft.com/en-us/download/details.aspx?id=53321)
You must have the Visual Studio Installer template installed

The entry point (startup project) is 'Desktop Scrobbler' (right-click on the project and choose 'Set as StartUp project').

Dependencies
============

This project tries to minimise the number of external dependencies.  Any dependencies however, are generally (but not exclusively) managed by the NuGet package manager.
NuGet dependencies will be downloaded when you first try to build the project.

The only exception to this, is the iTunes Interop DLL, which should be included in the 'Desktop Scrobbler -> packages' directory.

Before Running the Project
==========================

Pre-build Event
---------------

The entry point project contains a pre-build event to correctly version the projects based on VorTechS' versioning system that uses the current date.
It will automatically amend the 'properties -> AssemblyInfo.cs' of every project to update the current version number.

The pre-build event is a Build Task generated by the 'BuildTask' project.

You _MUST_ build this project first!  (Right-click and 'Build' is sufficient)

If you don't want to adopt the automated versioning, you can remove this requirement, by right-clicking on the 'DesktopScrobbler' project, selecting 'Properties', selecting 'Build Events' and removing the 'Pre-build event command line'

LastFM API Details
------------------

To successfully run the project, you must substitute the values in the 'Common -> Static Classes -> APIDetails.cs' with your own details.

Some General Debugging Advice
=============================

Windows Media Player Plugin (WindowsMediaScrobbleSource.cs): If you can avoid it, do NOT place breakpoints or step-through any of the COM interop code (COMInterfaces.cs, RemotedWindowsMediaPlayer.cs, RemoteHostInfo.cs).
Due to the nature of this code, Visual Studio doesn't always recover well if you 'stand-still' for too long a period of time.

WindowsMediaPlayerScrobbleplugin
--------------------------------

The architecture of the application supports Dependency Injection (plugins), but not all parts of the application are single-threaded.
Windows Media Player Remoting ONLY successfully works through an Single Threaded Apartment, and you can't cheat!

The 'WindowsMediaPlayerScrobblePlugin' contains all the code I've (VorTechS) has tried to force the plugin to start Windows Media Player Remoting in an STA thread, but Windows Media Player doesn't successfully respond.
Because of this, the WindowsMediaPlayerScrobblePlugin had to be moved into the 'Desktop Scrobbler' project and the Remoting will always try to start.

Someone who understands COM/Remoting/Apartment Threading better, might be able to fix this so that the code can be moved back out to an external library.
