Pre-Requisits
=============

This project must be built using Visual Studio 2015, Update 3 or above.
You must have .NET 4.6.2 installed: (https://www.microsoft.com/en-us/download/details.aspx?id=53321)
You must have the Visual Studio Installer template installed: 

Visual Studio 2015: (https://marketplace.visualstudio.com/items?itemName=VisualStudioProductTeam.MicrosoftVisualStudio2015InstallerProjects)
Visual Studio 2017: https://marketplace.visualstudio.com/items?itemName=VisualStudioProductTeam.MicrosoftVisualStudio2017InstallerProjects

The entry point (startup project) is 'Desktop Scrobbler' (right-click on the project and choose 'Set as StartUp project').

Dependencies
============

This project tries to minimise the number of external dependencies.  Any dependencies however, are generally (but not exclusively) managed by the NuGet package manager.
NuGet dependencies will be downloaded when you first try to build the project.

The only exception to this, is the iTunes Interop DLL, which should be included in the 'Desktop Scrobbler -> packages' directory.

Before Running the Project
==========================

Pre-build Event
---------------

The entry point project contains a pre-build event to correctly version the projects based on VorTechS' versioning system that uses the current date.
It will automatically amend the 'properties -> AssemblyInfo.cs' of every project to update the current version number.

The pre-build event is a Build Task generated by the 'BuildTask' project.

You _MUST_ build this project first!  (Right-click and 'Build' is sufficient)

If you don't want to adopt the automated versioning, you can remove this requirement, by right-clicking on the 'DesktopScrobbler' project, selecting 'Properties', selecting 'Build Events' and removing the 'Pre-build event command line'

LastFM API Details
------------------

You must substitute the values in the 'Common -> Static Classes -> APIDetails.cs' with your own details.

Some General Debugging Advice
=============================

Windows Media Player Plugin (WindowsMediaScrobbleSource.cs): If you can avoid it, do NOT place breakpoints or step-through any of the COM interop code (COMInterfaces.cs, RemotedWindowsMediaPlayer.cs, RemoteHostInfo.cs).
Due to the nature of this code, Visual Studio doesn't always recover well if you 'stand-still' for too long a period of time.  The same applies with the WindowsMediaPlayerScrobblerSource.cs.

If you take too long (literally a matter of seconds) stuck at a breakpoint, the COM interoperability will become broken and one of 2 things will happen:

1) Visual Studio will stop responding, taking upwards of 3 minutes to come back to life.  It will come back to life, at which point you should stop debugging (and restart if you need to).
2) Windows Media Player will stop responding, and will never recover until you 'End Task' it.

Debug Flags
===========

The following Debug flags are available for granular output to the debug window:

DebugiTunes => Outputs messages relevant to the iTunes tracking loop
DebugWMPScrobbler => Outputs messages relevant to the Windows Media Player tracking loop
DebugAPICalls => Outputs messages relevant to the Last.fm API calls

By default, messages are output relevant to the Start, Scrobble and End loop of the tracking process.

WindowsMediaPlayerScrobbleplugin
--------------------------------

The architecture of the application supports Dependency Injection (plugins), but not all parts of the application are single-threaded.
Windows Media Player Remoting ONLY successfully works through an Single Threaded Apartment, and you can't cheat!

The 'WindowsMediaPlayerScrobblePlugin' contains all the code I've (VorTechS) has tried to force the plugin to start Windows Media Player Remoting in an STA thread, but Windows Media Player doesn't successfully respond.
Because of this, the WindowsMediaPlayerScrobblePlugin had to be moved into the 'Desktop Scrobbler' project and the Remoting will always try to start.

Someone who understands COM/Remoting/Apartment Threading better, might be able to fix this so that the code can be moved back out to an external library.

ScrobblerUi
===========

The ScrobblerUi inherits the 'NotificationThread' Form (used for the tray menu, and receiving updates from the Scrobbler).
You may find that you are NOT able to load the designer for the ScrobblerUi due to Visual Studio not being able to find the Base class.

If you need to load the designer, first view the code (right click on the designer in the Solution Explorer), and then modify the constructor, switching out ': NotificationThread' for ': Form'.

Make the changes you need to, and then switch the constructor back to inherit from the NotificationThread form.


Installer
=========

When building the installer, ensure that you modify the version number to matching the current build.  This ensures that the product code gets upgraded (Answer 'Yes') to the question that pops up,
and ensures that a history of upgrade paths is maintained meaning the user does not need to 'un-install' the previous version.

To set the version number, highlight the installer project and hit 'F4' to get to the properties.  (Right-clicking the project file is NOT the same thing!)

Once built, like with any project bold, right-click on the installer project, 'Open Folder in Explorer' and browse to the bin\debug folder, and there's your installer files.


Update Process
==============

The update process is a unique process that enables you to simply set version details in a public facing website that can both be used for the automatic update of software,
and for notifying your users of a new version.

The update process scrapes the specified page, and pulls the version info. from the first <h3> tag (as it stands at the time of writing).

It uses the 'text' part embeded in the <a> tag to extract the new version detail, and compare that with the version of the application
that is running now.

Right now, if there's a newer version on the update page, there is a popup notification (every time the application starts), and a menu option 
will appear in the context menu.

Clicking on the menu option downloads the file to %appdata%\LastFM\Desktop Scrobbler\v3\Updates, which is deleted on every startup of the application, to ensure no files are left hanging around.

During download the new menu option becomes a progress indicator.

Once downloaded click on the menu option which will have changed to an install notification.

The installation process then extracts the content of the downloaded zip file into the updates folder, kicks off the setup.exe and closes the currently running application

As mentioned, once the application is started again (automatically after install) the updates folder is trashed to keep things 'clean'

Code Signing
============

In order to enable code signing, you will need to have a code signing cert installed (out of scope of this ReadMe). 
(The examples below use the SHA1 hash of the Last.fm code signing certificate.)

Easiest way to build is to check out the codesigning branch, and rebase it onto master. (The following changes are already applied in that branch.)

Add the following post-build event to every project in the solution (except the installer):
  "C:\Program Files (x86)\Windows Kits\10\bin\x86\signtool.exe" sign /sha1 948A30D066775994CFCFA49FE55D8B17458AED41 "$(TargetPath)"

Add the following post-build event to the installer in addition to the post-build event already there:
  "C:\Program Files (x86)\Windows Kits\10\bin\x86\signtool.exe" sign /sha1 948A30D066775994CFCFA49FE55D8B17458AED41 /d "Last.fm Desktop Scrobbler" "$(BuiltOutputPath)"


Notes on Building a Production Version
======================================

1. make sure you have a code signing cert installed. 
2. check out the "codesigning" branch. You may need to merge master into it.
3. you will need to update */*/*/APIDetails.cs with the official API key and secret.
4. you will need to change the version number in the installer, AND the version numbers in */*/*/AssemblyInfo.cs .
   The build process will update the AssemblyInfo files to be based on today's date, but will not change the installer - and you probably want them the same anyway.
5. you might find it helps to do "git update-index --assume-unchanged */*/*/APIDetails.cs */*/*/AssemblyInfo.cs" so you don't have too much crap to check in.
   NEVER COMMIT THE API DETAILS, OBVIOUSLY ;)
6. You need to upload both the .msi (for the downloads page) and a zip containing the .msi AND setup.exe, for the updates page.

